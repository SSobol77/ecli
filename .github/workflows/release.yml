# .github/workflows/release.yml
name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  id-token: write # for PyPI Trusted Publishing
  contents: write # for create GitHub Release

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby-full rpm nsis dpkg-dev fakeroot zsync
          sudo gem install --no-doc fpm

      - name: Install uv & tools
        run: |
          pipx install uv
          uv tool install pyinstaller
          python -m pip install --user appimage-builder
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Build binary (PyInstaller in Docker)
        run: |
          docker build -f docker/build-linux-deb.Dockerfile -t ecli-deb .
          docker run --rm -v "$(pwd)/dist:/app/dist" ecli-deb bash scripts/build_pyinstaller_linux.sh

      - name: Package .deb (in Docker)
        run: |
          docker build -f docker/build-linux-deb.Dockerfile -t ecli-deb .
          docker run --rm -v "$(pwd)/dist:/app/dist" ecli-deb bash scripts/build-and-package-deb.sh

      - name: Package .rpm (in Docker)
        run: |
          docker build -f docker/build-linux-rpm.Dockerfile -t ecli-rpm .
          docker run --rm -v "$(pwd)/dist:/app/dist" ecli-rpm bash scripts/build-and-package-rpm.sh

      - name: Package AppImage
        run: bash scripts/package_appimage.sh ${GITHUB_REF_NAME#v}

      - name: Checksums
        run: |
          mkdir -p dist
          (cd dist && sha256sum * > SHA256SUMS.txt)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: dist/*

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv & pyinstaller
        shell: pwsh
        run: |
          pipx install uv
          uv tool install pyinstaller

      - name: Build binary (PyInstaller)
        shell: pwsh
        run: scripts/build_pyinstaller_windows.ps1

      - name: Install NSIS
        shell: pwsh
        run: choco install nsis -y

      - name: Make installer (.exe)
        shell: pwsh
        run: makensis packaging/windows/nsis/ecli.nsi

      - name: Checksums
        shell: bash
        run: |
          mkdir -p dist
          mv *.exe dist/
          (cd dist && sha256sum * > SHA256SUMS.txt)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: dist/*

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv & pyinstaller
        run: |
          pipx install uv
          uv tool install pyinstaller

      - name: Build binary (PyInstaller)
        run: pyinstaller --onefile --name ecli ecli.spec

      - name: Checksums
        run: |
          mkdir -p dist
          mv dist/ecli dist/
          (cd dist && shasum -a 256 * > SHA256SUMS.txt)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-package
          path: dist/*

  # === publishing on PyPI via Trusted Publishing ===
  publish-pypi:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    environment:
      name: pypi
      url: https://pypi.org/p/ecli
    permissions:
      id-token: write # for OIDC -> PyPI
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build sdist and wheel
        run: |
          python -m pip install --upgrade build
          python -m build # will create dist/*.tar.gz and dist/*.whl

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.10.3
        with:
          # Without tokens â€” via Trusted Publishing (OIDC).
          # Enable "GitHub Trusted Publishers" in your project settings on PyPI.
          attestations: false

  # === Final GitHub Release with all artifacts ===
  publish-release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos, publish-pypi]
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-collect

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            dist-collect/**/*
